install.packages("slidify")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
library(slidify)
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
install.package(KernSmooth)
isntall.package("KernSmooth")
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
## The following functions allow the inverse of a given matrix
## to be cached.  On a first call to get the inverse of the
## matrix, the inverse is calculated and stored in variable i.
## Any subsequent call to get the inverse will return the value of i
## without calling the solve function to recalculate the inverse.
## makeCacheMatrix creates list of 4 functions to:
##     1. set the value of the matrix
##     2. get the value of the matrix
##     3. set the value of the inverse
##     4. get the value of the inverse
## note that i & x will be part of the same environment as the list of functions
## returned by makeCacheMatrix.  Due to the lexical scoping of R, that means
## subsequent calls of those functions for an instance of makeCacheMatrix
## will access the values of i & x that were previously stored in the
## environment.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve calculates and returns the inverse of a matrix if that matrix
## has not been previously inverted.  If the matrix was already inverted
## then the function gets the value previously cached in x.
## x would be the return of makeCacheMatrix
## e.g., m <- matrix(rnorm(100),10,10)  ##10 x 10 matrix
##       x <- makeCacheMatrix(m)        ##return the special "matrix"
##       inv <- cacheSolve(x)  ## calculates and cache's inverse of matrix m
##       inv1 <- cacheSolve(x) ## returns inverse of matrix m from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
## check if i is null and return i if not and exit the function
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## invert the matrix m if not previously calcualted
data <- x$get()
i <- solve(data, ...)
## cache the inverse of matrix m and return it
x$setinverse(i)
i
}
m <- matrix(rnorm(100),10,10)  ##10 x 10 matrix
x <- makeCacheMatrix(m)        ##return the special "matrix"
inv <- cacheSolve(x)  ## calculates and cache's inverse of matrix m
inv
inv <- cacheSolve(x)  ## calculates and cache's inverse of matrix m
inv
mydiv <- 1
mydiv1 <- 2
swirl()
library(swirl)
swirl()
my
mydiv
mydiv
info()
nxt()
my_sqrt
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Brian")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("x", "y", "z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
bye()
library(swirl)
ls()
ls
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
[!is.na(x) & x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
source("http://bioconductor.org/biocLite.R")
biocLite("rdf5")
library(rdf5)
library(rhdf5)
library(rhdf5)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
?grepl
path <- paste(directory, "features.txt", sep="/")
setwd("C:/Users/bfrancis/Desktop/Coursera/Getting And Cleaning Data/Course Project/getdata-projectfiles-UCI HAR Dataset")
directory
ls()
setwd(..)
setwd(.)
setwd("C:/Users/bfrancis/Desktop/Coursera/Getting And Cleaning Data/Course Project")
directory <- "getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset""
directory <- "getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset"
path <- paste(directory, "features.txt", sep="/")
features <- read.table(path, stringsAsFactors=FALSE)
ls()
directory
directory <- "getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset"
path <- paste(directory, "features.txt", sep="/")
path
features <- read.table(path, stringsAsFactors=FALSE)
head(features[,2])
x <- grep("mean()", features[,2])
head(x)
x <- grep("mean()", features[,2], value = TRUE)
head(x)
length(x)
x
x <- grep("mean()", features[,2], value = TRUE)
x <- grep(c("mean()", std()), features[,2], value = TRUE)
x <- grep(c("mean()", "std()""), features[,2], value = TRUE)
x <- grep(c("mean()", "std()"), features[,2], value = TRUE)
txt <- c("arm","foot","lefroo", "bafoobar")
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
i # 2 and 4
txt[i]
x <- grepl(c("mean()", features[,2], value = TRUE)
x <- grepl("mean()", features[,2], value = TRUE)
x <- grepl("mean()", features[,2])
length*x
length(x)
head(x)
features[x,]
length(features[x,])
dim(features[x,])
x <- grepl("std()", features[,2])
x <- grepl("mean()", features[,2])
y <- grepl("std()", features[,2])
dim(features[x | y ,])
features[x | y ,]
x <- grepl("mean()", features[,2], fixed=TRUE)
y <- grepl("std()", features[,2], fixed = TRUE)
features[x | y ,]
features[x | y ,]`
source("run_analysis.R")
source("run_analysis.R")
run_analysis(directory)
source("run_analysis.R")
run_analysis(directory)
source("run_analysis.R")
run_analysis(directory)
source("run_analysis.R")
run_analysis(directory)
?factor
path <- paste(directory, "activity_labels.txt", sep="/")
activitylabels <- read.table(path)
activitylabels
activitylabels[,2]
source("run_analysis.R")
run_analysis(directory)
source("run_analysis.R")
run_analysis(directory)
source("run_analysis.R")
z <- run_analysis(directory)
head(z)
head(z[,1:5])
source("run_analysis.R")
z <- run_analysis(directory)
head(z[,1:5])
str(z)
source("run_analysis.R")
z <- run_analysis(directory)
head(z[,1:5])
str(z)
?aggregate
ls()
str(z)
ncol(z)
result <- aggregate(x = z[,3:ncol(z)], by=z[,1:2], FUN="mean")
str(result)
dim(z)
dim(result)
head(result)
source("run_analysis.R")
result <- run_analysis(directory)
dim(reslt)
dim(result)
str(z[,1])
factor(str(z[,1]))
as.factor(str(z[,1]))
?facotr
?factor
table(z[,1])
table(z[,2])
table(z[,1:2])
dim(table(z[,1:2]))
?aggregate
result
?is.na
t <- complete.cases(result)
result[t,]
result[!t,]
dim(result[!t,])
con = url("http://scholar.gcon = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")oogle.com/citations?con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")user=HI-I6C0AAAAJ&hl=en")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 = GET("https://www.ltm.criver.com",
authenticate("bfrancis","Beatles1!"))
pg2 = GET("https://ltm.criver.com/LTMCommonUI/Login.aspx?OriginalURL=https%3a%2f%2fltm.criver.com%2fLTMCatalog%2fCatalogsList.aspx",
authenticate("bfrancis","Beatles1!"))
pg2
names(pg2)
setwd("C:/Users/bfrancis/Desktop/Coursera/Getting And Cleaning Data/Quiz2")
asc <- read.csv("getdata-data-ss06pid.csv")
unique(asc$AGEP)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
dim(htmlCode)
length(htmlCode)
htmlCode[c(10,20,30,100)]
nchar(htmlCode[c(10,20,30,100)])
?read
?read.table
?read.fwf
x <- read.fwf("getdata-wksst8110")
x <- read.fwf("getdata-wksst8110", skip=4)
x <- read.fwf("getdata-wksst8110", widths = c(9, 4,3,4,3,4,3,4,3) skip=4)
x <- read.fwf("getdata-wksst8110", widths = c(9, 4,3,4,3,4,3,4,3), skip=4)
x <- read.fwf("getdata-wksst8110.for", widths = c(9, 4,3,4,3,4,3,4,3), skip=4)
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4)
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, strip.white=TRUE)
head(x)
?read.fwf
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, sep=" ")
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, sep=c(" ","-")
)
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, sep=c(" ","-", "")
)
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, sep=c(-"))
x <- read.fwf("getdata-wksst8110.for", widths = c(10, 4,3,4,3,4,3,4,3), skip=4, sep="-")
x <- read.fwf("getdata-wksst8110.for", widths = c(11, 4,3,4,3,4,3,4,3), skip=4)
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(12, 4,3,4,3,4,3,4,3), skip=4)
head(x)
head(x[1])
head(x[2])
head(x[,2])
x <- read.fwf("getdata-wksst8110.for", widths = c(15, 4,3,4,3,4,3,4,3), skip=4)
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(15, 5,3,4,3,4,3,4,3), skip=4, )
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(15, 4,1,3,4,1,3,4,1,3,4,1,3), skip=4, )
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(15, 4,1,3,5,4,1,3,4,1,3,4,1,3), skip=4, )
head(x)
x <- read.fwf("getdata-wksst8110.for", widths = c(15, 4,1,3,5,4,1,3,5,4,1,3,5,4,1,3), skip=4, )
head(x)
x[,6]
sum(x[,6])
head(x)
head(x[,6])
setwd("C:/Users/bfrancis/Desktop/Coursera/Getting And Cleaning Data/Course Project")
source("run_analysis.R")
getdata(directory) {
##get codes for activity labels
path <- paste(directory, "activity_labels.txt", sep="/")
activitylabels <- read.table(path)
##get variable names
path <- paste(directory, "features.txt", sep="/")
features <- read.table(path, stringsAsFactors=FALSE)
##get data table for test data set
path <- paste(directory, "test/X_test.txt", sep= "/")
testdata <- read.table(path)
getdata(directory) {
##get codes for activity labels
path <- paste(directory, "activity_labels.txt", sep="/")
activitylabels <- read.table(path)
##get variable names
path <- paste(directory, "features.txt", sep="/")
features <- read.table(path, stringsAsFactors=FALSE)
##get data table for test data set
path <- paste(directory, "test/X_test.txt", sep= "/")
testdata <- read.table(path)
##get subject list for test data set
path <- paste(directory, "test/subject_test.txt", sep= "/")
testsubjects <- read.table(path)
##get activity list for test data set
path <- paste(directory, "test/y_test.txt", sep= "/")
testactivities <- read.table(path)
##get data table for train data set
path <- paste(directory, "train/X_train.txt", sep= "/")
traindata <- read.table(path)
source("run_analysis.R")
run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
getdata <- function(directory) {
##get codes for activity labels
path <- paste(directory, "activity_labels.txt", sep="/")
activitylabels <- read.table(path)
##get variable names
path <- paste(directory, "features.txt", sep="/")
features <- read.table(path, stringsAsFactors=FALSE)
##get data table for test data set
path <- paste(directory, "test/X_test.txt", sep= "/")
testdata <- read.table(path)
##get subject list for test data set
path <- paste(directory, "test/subject_test.txt", sep= "/")
testsubjects <- read.table(path)
##get activity list for test data set
path <- paste(directory, "test/y_test.txt", sep= "/")
testactivities <- read.table(path)
##get data table for train data set
path <- paste(directory, "train/X_train.txt", sep= "/")
traindata <- read.table(path)
##get subject list for train data set
path <- paste(directory, "train/subject_train.txt", sep= "/")
trainsubjects <- read.table(path)
##get activity list for train data set
path <- paste(directory, "train/y_train.txt", sep= "/")
trainactivities <- read.table(path)
list(activitylabels, features, testdata, testsubjects,
testactivities, traindata, trainsubjects, trainactivities)
}
z <- getdata("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
names(z)
str(z)
str(z$features)
z[[1]]
z[[2]]
str(z[[2]])
z$features
getdata <- function(directory) {
##get codes for activity labels
path <- paste(directory, "activity_labels.txt", sep="/")
activitylabels <- read.table(path)
##get variable names
path <- paste(directory, "features.txt", sep="/")
features <- read.table(path, stringsAsFactors=FALSE)
##get data table for test data set
path <- paste(directory, "test/X_test.txt", sep= "/")
testdata <- read.table(path)
##get subject list for test data set
path <- paste(directory, "test/subject_test.txt", sep= "/")
testsubjects <- read.table(path)
##get activity list for test data set
path <- paste(directory, "test/y_test.txt", sep= "/")
testactivities <- read.table(path)
##get data table for train data set
path <- paste(directory, "train/X_train.txt", sep= "/")
traindata <- read.table(path)
##get subject list for train data set
path <- paste(directory, "train/subject_train.txt", sep= "/")
trainsubjects <- read.table(path)
##get activity list for train data set
path <- paste(directory, "train/y_train.txt", sep= "/")
trainactivities <- read.table(path)
list(activitylabels=activitylabels, features=features, testdata=testdata,
testsubjects=testsubjects, testactivities=testactivities,
traindata=traindata, trainsubjects=trainsubjects,
trainactivities=trainactivities)
}
z <- getdata("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
str(z$features)
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
dim(result)
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
source("run_analysis.R")
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
?ncol
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
source("run_analysis.R")
result <- run_analysis("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
dim(result)
?write.table
source("run_analysis.R")
run_analysis.R
run_analysis.R()
run_analysis
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
